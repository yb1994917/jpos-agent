package com.gooagoo.pos.plugin.agent;

import java.io.File;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.Instrumentation;
import java.util.List;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;

import com.gooagoo.pos.plugin.agent.transformer.JPosTransformer;
import com.gooagoo.pos.plugin.agent.writer.WriterFactory.WriterFactoryProperties;
import com.sun.tools.attach.VirtualMachine;
import com.sun.tools.attach.VirtualMachineDescriptor;

public class JavaPosAgent {

	private static void inject(String agentPath) {
		VirtualMachine jvm = null;
		try {
			List<VirtualMachineDescriptor> vms = VirtualMachine.list();
			for (VirtualMachineDescriptor vm : vms) {
				jvm = VirtualMachine.attach(vm.id());
				jvm.loadAgent(agentPath);
			}
		} catch (Exception e) {
			//TODO 记录日志
			System.out.println(e.toString());
		}
	}

	private static WriterFactoryProperties writerFactorySettings = new WriterFactoryProperties();

	public static void main(String... args) {
		String agent = null;
		String server = "127.0.0.1";
		int port = 12345;

		writerFactorySettings.setServer(server);
		writerFactorySettings.setPort(port);
		
		if (args.length < 1) {
			System.out.println("step 1/2. 请指定代理.");
			return;
		} else {
			agent = args[0];
			File agentFile = new File(agent);
			if (!agentFile.exists()) {
				System.out.println("step 2/2. 代理:[" + agent + "]不存在!");
				return;
			} else {
				inject(agent);
				System.out.println("step 2/2. 代理:[" + agent + "]");
			}
		}
	}

	public static void premain(String args, Instrumentation inst) {
		ClassFileTransformer transformer = new JPosTransformer();
		inst.addTransformer(transformer);
	}

	public static void agentmain(String args, Instrumentation inst) {
		System.out.println("agent loaded...");
		ClassFileTransformer transformer = new JPosTransformer();
		inst.addTransformer(transformer);
	}
}
